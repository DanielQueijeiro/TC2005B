<%- include('includes/head.ejs' , 
{username: username, permisos: permisos})%>

<main>
    <section class="hero">
    <div class="hero-body">
      <h1 class="title">Bienvenidos a la Pizzeria!</h1>
      <h1 class="subtitle">En nuestra página podrás crear tus propias pizza para luego ordenarlas y recogerlas en cualquiera de nuestras sucursales :)</h1>
      <img class="" src="https://homebuddy.store/cdn/shop/articles/store_bought_pizza_dough_1024x.jpg?v=1616055784" height="360" width="500">
      <div class="content">
        <h1 class="title mt-4">Preguntas Lab 19</h1>
        <p class="subtitle has-text-weight-bold">¿En qué consiste el control de acceso basado en roles?</p>
          <p>
            El control de acceso basado en roles (Role-Based Access Control, RBAC) es un modelo de seguridad que regula el acceso a recursos informáticos dentro de un sistema o red. En este modelo, el acceso a recursos se determina según los roles que desempeñan los usuarios dentro de una organización. Los roles representan conjuntos de responsabilidades, funciones o actividades dentro del sistema.</p>
        <p class="subtitle has-text-weight-bold">Investiguen y describan 2 sistemas, uno que aplique RBAC y uno que no. Realicen un análisis de las ventajas y desventajas de cada uno con respecto al control de acceso.</p>
            <p class="subtitle">Sistema con RBAC: Microsoft Active Directory</p>
            <p>Descripción: Microsoft Active Directory es un servicio de directorio utilizado principalmente en entornos empresariales para gestionar identidades y recursos de red. Utiliza el modelo RBAC para controlar el acceso a los recursos dentro de una red. En Active Directory, los roles se definen mediante grupos de seguridad, y los usuarios se asignan a estos grupos para obtener los permisos necesarios.</p>
            <p>Ventajas:</p>
            <ul>
              <li>
                Centralización: Active Directory proporciona una plataforma centralizada para gestionar roles, usuarios y permisos en toda la red, lo que facilita la administración del acceso.
              </li>
              <li>
                Escalabilidad: Permite la creación de una estructura de roles escalable que se puede adaptar fácilmente a medida que la organización crece o cambian las necesidades de acceso.
              </li>
              <li>
                Facilidad de administración: La asignación de roles a los usuarios simplifica la administración de permisos, ya que los cambios en los roles se reflejan automáticamente en los usuarios asignados.
              </li>
            </ul>
            <p>Desventajas:</p>
              <ul>
                <li>
                  Complejidad inicial: Configurar correctamente los roles y permisos puede requerir un conocimiento técnico avanzado y planificación cuidadosa.
                </li>
                <li>
                  Posibilidad de errores: Si los roles no se definen correctamente o se asignan incorrectamente, puede haber riesgos de seguridad y acceso inadecuado a los recursos.
                </li>
              </ul>
              <p class="subtitle">Sistema sin RBAC: Sistema de Archivos Tradicional en Linux</p>
              <p>Descripción: En un sistema de archivos tradicional en Linux, el control de acceso se basa en permisos de usuario y grupo asociados a cada archivo y directorio. No se utiliza un modelo de RBAC formalmente estructurado.</p>
              <p>Ventajas:</p>
              <ul>
                <li>
                  Simplicidad: El sistema de archivos tradicional es fácil de entender y utilizar, ya que los permisos se aplican directamente a archivos y directorios individuales.
                </li>
                <li>
                  Granularidad: Los permisos se pueden establecer de manera muy específica para cada archivo o directorio, lo que proporciona un control detallado sobre quién puede acceder y qué acciones pueden realizar.
                </li>
              </ul>
              <p>Desventajas:</p>
                <ul>
                  <li>
                    Gestión fragmentada: La gestión de permisos puede volverse compleja en sistemas con muchos usuarios y recursos, ya que los permisos se aplican de forma independiente a cada archivo y directorio.
                  </li>
                  <li>
                    Mayor riesgo de errores: La asignación manual de permisos a cada archivo y directorio puede aumentar el riesgo de errores humanos, como otorgar permisos incorrectos o olvidar ajustarlos adecuadamente.
                  </li>
                </ul>
    </div>
    </section>

<%- include('includes/foot.ejs') %>